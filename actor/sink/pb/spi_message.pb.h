// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spi_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spi_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spi_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spi_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spi_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spi_5fmessage_2eproto;
namespace stm32 {
class SPIMessage;
struct SPIMessageDefaultTypeInternal;
extern SPIMessageDefaultTypeInternal _SPIMessage_default_instance_;
}  // namespace stm32
PROTOBUF_NAMESPACE_OPEN
template<> ::stm32::SPIMessage* Arena::CreateMaybeMessage<::stm32::SPIMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace stm32 {

// ===================================================================

class SPIMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stm32.SPIMessage) */ {
 public:
  inline SPIMessage() : SPIMessage(nullptr) {}
  ~SPIMessage() override;
  explicit constexpr SPIMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SPIMessage(const SPIMessage& from);
  SPIMessage(SPIMessage&& from) noexcept
    : SPIMessage() {
    *this = ::std::move(from);
  }

  inline SPIMessage& operator=(const SPIMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPIMessage& operator=(SPIMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SPIMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SPIMessage* internal_default_instance() {
    return reinterpret_cast<const SPIMessage*>(
               &_SPIMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SPIMessage& a, SPIMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SPIMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SPIMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPIMessage* New() const final {
    return new SPIMessage();
  }

  SPIMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPIMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SPIMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SPIMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPIMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stm32.SPIMessage";
  }
  protected:
  explicit SPIMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLoadFieldNumber = 5,
    kTsFieldNumber = 2,
    kTickFieldNumber = 3,
    kLengthFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes load = 5;
  void clear_load();
  const std::string& load() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_load(ArgT0&& arg0, ArgT... args);
  std::string* mutable_load();
  PROTOBUF_MUST_USE_RESULT std::string* release_load();
  void set_allocated_load(std::string* load);
  private:
  const std::string& _internal_load() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_load(const std::string& value);
  std::string* _internal_mutable_load();
  public:

  // double ts = 2;
  void clear_ts();
  double ts() const;
  void set_ts(double value);
  private:
  double _internal_ts() const;
  void _internal_set_ts(double value);
  public:

  // uint32 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint32 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 length = 4;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:stm32.SPIMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_;
  double ts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spi_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SPIMessage

// string name = 1;
inline void SPIMessage::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SPIMessage::name() const {
  // @@protoc_insertion_point(field_get:stm32.SPIMessage.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SPIMessage::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stm32.SPIMessage.name)
}
inline std::string* SPIMessage::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:stm32.SPIMessage.name)
  return _s;
}
inline const std::string& SPIMessage::_internal_name() const {
  return name_.Get();
}
inline void SPIMessage::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SPIMessage::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SPIMessage::release_name() {
  // @@protoc_insertion_point(field_release:stm32.SPIMessage.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SPIMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:stm32.SPIMessage.name)
}

// double ts = 2;
inline void SPIMessage::clear_ts() {
  ts_ = 0;
}
inline double SPIMessage::_internal_ts() const {
  return ts_;
}
inline double SPIMessage::ts() const {
  // @@protoc_insertion_point(field_get:stm32.SPIMessage.ts)
  return _internal_ts();
}
inline void SPIMessage::_internal_set_ts(double value) {
  
  ts_ = value;
}
inline void SPIMessage::set_ts(double value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:stm32.SPIMessage.ts)
}

// uint32 tick = 3;
inline void SPIMessage::clear_tick() {
  tick_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SPIMessage::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SPIMessage::tick() const {
  // @@protoc_insertion_point(field_get:stm32.SPIMessage.tick)
  return _internal_tick();
}
inline void SPIMessage::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tick_ = value;
}
inline void SPIMessage::set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:stm32.SPIMessage.tick)
}

// uint32 length = 4;
inline void SPIMessage::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SPIMessage::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SPIMessage::length() const {
  // @@protoc_insertion_point(field_get:stm32.SPIMessage.length)
  return _internal_length();
}
inline void SPIMessage::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void SPIMessage::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:stm32.SPIMessage.length)
}

// bytes load = 5;
inline void SPIMessage::clear_load() {
  load_.ClearToEmpty();
}
inline const std::string& SPIMessage::load() const {
  // @@protoc_insertion_point(field_get:stm32.SPIMessage.load)
  return _internal_load();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SPIMessage::set_load(ArgT0&& arg0, ArgT... args) {
 
 load_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stm32.SPIMessage.load)
}
inline std::string* SPIMessage::mutable_load() {
  std::string* _s = _internal_mutable_load();
  // @@protoc_insertion_point(field_mutable:stm32.SPIMessage.load)
  return _s;
}
inline const std::string& SPIMessage::_internal_load() const {
  return load_.Get();
}
inline void SPIMessage::_internal_set_load(const std::string& value) {
  
  load_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SPIMessage::_internal_mutable_load() {
  
  return load_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SPIMessage::release_load() {
  // @@protoc_insertion_point(field_release:stm32.SPIMessage.load)
  return load_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SPIMessage::set_allocated_load(std::string* load) {
  if (load != nullptr) {
    
  } else {
    
  }
  load_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), load,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:stm32.SPIMessage.load)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace stm32

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spi_5fmessage_2eproto
