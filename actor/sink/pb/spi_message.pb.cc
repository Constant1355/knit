// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spi_message.proto

#include "spi_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace stm32 {
constexpr SPIMessage::SPIMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , load_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , length_(0u)
  , _oneof_case_{}{}
struct SPIMessageDefaultTypeInternal {
  constexpr SPIMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SPIMessageDefaultTypeInternal() {}
  union {
    SPIMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SPIMessageDefaultTypeInternal _SPIMessage_default_instance_;
}  // namespace stm32
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_spi_5fmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_spi_5fmessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_spi_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_spi_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stm32::SPIMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::stm32::SPIMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stm32::SPIMessage, name_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::stm32::SPIMessage, length_),
  PROTOBUF_FIELD_OFFSET(::stm32::SPIMessage, load_),
  PROTOBUF_FIELD_OFFSET(::stm32::SPIMessage, ts_timeout_),
  PROTOBUF_FIELD_OFFSET(::stm32::SPIMessage, tick_cmd_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::stm32::SPIMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stm32::_SPIMessage_default_instance_),
};

const char descriptor_table_protodef_spi_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021spi_message.proto\022\005stm32\"\226\001\n\nSPIMessag"
  "e\022\014\n\004name\030\001 \001(\t\022\014\n\002ts\030\002 \001(\001H\000\022\021\n\007timeout"
  "\030\007 \001(\001H\000\022\016\n\004tick\030\003 \001(\rH\001\022\021\n\007command\030\006 \001("
  "\rH\001\022\016\n\006length\030\004 \001(\r\022\014\n\004load\030\005 \001(\014B\014\n\nts_"
  "timeoutB\n\n\010tick_cmdb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_spi_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spi_5fmessage_2eproto = {
  false, false, 187, descriptor_table_protodef_spi_5fmessage_2eproto, "spi_message.proto", 
  &descriptor_table_spi_5fmessage_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_spi_5fmessage_2eproto::offsets,
  file_level_metadata_spi_5fmessage_2eproto, file_level_enum_descriptors_spi_5fmessage_2eproto, file_level_service_descriptors_spi_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_spi_5fmessage_2eproto_getter() {
  return &descriptor_table_spi_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_spi_5fmessage_2eproto(&descriptor_table_spi_5fmessage_2eproto);
namespace stm32 {

// ===================================================================

class SPIMessage::_Internal {
 public:
};

SPIMessage::SPIMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stm32.SPIMessage)
}
SPIMessage::SPIMessage(const SPIMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  load_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_load().empty()) {
    load_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_load(), 
      GetArenaForAllocation());
  }
  length_ = from.length_;
  clear_has_ts_timeout();
  switch (from.ts_timeout_case()) {
    case kTs: {
      _internal_set_ts(from._internal_ts());
      break;
    }
    case kTimeout: {
      _internal_set_timeout(from._internal_timeout());
      break;
    }
    case TS_TIMEOUT_NOT_SET: {
      break;
    }
  }
  clear_has_tick_cmd();
  switch (from.tick_cmd_case()) {
    case kTick: {
      _internal_set_tick(from._internal_tick());
      break;
    }
    case kCommand: {
      _internal_set_command(from._internal_command());
      break;
    }
    case TICK_CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:stm32.SPIMessage)
}

void SPIMessage::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
load_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
length_ = 0u;
clear_has_ts_timeout();
clear_has_tick_cmd();
}

SPIMessage::~SPIMessage() {
  // @@protoc_insertion_point(destructor:stm32.SPIMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SPIMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  load_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_ts_timeout()) {
    clear_ts_timeout();
  }
  if (has_tick_cmd()) {
    clear_tick_cmd();
  }
}

void SPIMessage::ArenaDtor(void* object) {
  SPIMessage* _this = reinterpret_cast< SPIMessage* >(object);
  (void)_this;
}
void SPIMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SPIMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SPIMessage::clear_ts_timeout() {
// @@protoc_insertion_point(one_of_clear_start:stm32.SPIMessage)
  switch (ts_timeout_case()) {
    case kTs: {
      // No need to clear
      break;
    }
    case kTimeout: {
      // No need to clear
      break;
    }
    case TS_TIMEOUT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TS_TIMEOUT_NOT_SET;
}

void SPIMessage::clear_tick_cmd() {
// @@protoc_insertion_point(one_of_clear_start:stm32.SPIMessage)
  switch (tick_cmd_case()) {
    case kTick: {
      // No need to clear
      break;
    }
    case kCommand: {
      // No need to clear
      break;
    }
    case TICK_CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = TICK_CMD_NOT_SET;
}


void SPIMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:stm32.SPIMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  load_.ClearToEmpty();
  length_ = 0u;
  clear_ts_timeout();
  clear_tick_cmd();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SPIMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stm32.SPIMessage.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _internal_set_ts(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_tick(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes load = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_load();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 command = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_command(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double timeout = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPIMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stm32.SPIMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stm32.SPIMessage.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double ts = 2;
  if (_internal_has_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ts(), target);
  }

  // uint32 tick = 3;
  if (_internal_has_tick()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tick(), target);
  }

  // uint32 length = 4;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_length(), target);
  }

  // bytes load = 5;
  if (!this->_internal_load().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_load(), target);
  }

  // uint32 command = 6;
  if (_internal_has_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_command(), target);
  }

  // double timeout = 7;
  if (_internal_has_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stm32.SPIMessage)
  return target;
}

size_t SPIMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stm32.SPIMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes load = 5;
  if (!this->_internal_load().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_load());
  }

  // uint32 length = 4;
  if (this->_internal_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  switch (ts_timeout_case()) {
    // double ts = 2;
    case kTs: {
      total_size += 1 + 8;
      break;
    }
    // double timeout = 7;
    case kTimeout: {
      total_size += 1 + 8;
      break;
    }
    case TS_TIMEOUT_NOT_SET: {
      break;
    }
  }
  switch (tick_cmd_case()) {
    // uint32 tick = 3;
    case kTick: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tick());
      break;
    }
    // uint32 command = 6;
    case kCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_command());
      break;
    }
    case TICK_CMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SPIMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SPIMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SPIMessage::GetClassData() const { return &_class_data_; }

void SPIMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SPIMessage *>(to)->MergeFrom(
      static_cast<const SPIMessage &>(from));
}


void SPIMessage::MergeFrom(const SPIMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stm32.SPIMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_load().empty()) {
    _internal_set_load(from._internal_load());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  switch (from.ts_timeout_case()) {
    case kTs: {
      _internal_set_ts(from._internal_ts());
      break;
    }
    case kTimeout: {
      _internal_set_timeout(from._internal_timeout());
      break;
    }
    case TS_TIMEOUT_NOT_SET: {
      break;
    }
  }
  switch (from.tick_cmd_case()) {
    case kTick: {
      _internal_set_tick(from._internal_tick());
      break;
    }
    case kCommand: {
      _internal_set_command(from._internal_command());
      break;
    }
    case TICK_CMD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SPIMessage::CopyFrom(const SPIMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stm32.SPIMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPIMessage::IsInitialized() const {
  return true;
}

void SPIMessage::InternalSwap(SPIMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &load_, GetArenaForAllocation(),
      &other->load_, other->GetArenaForAllocation()
  );
  swap(length_, other->length_);
  swap(ts_timeout_, other->ts_timeout_);
  swap(tick_cmd_, other->tick_cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPIMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_spi_5fmessage_2eproto_getter, &descriptor_table_spi_5fmessage_2eproto_once,
      file_level_metadata_spi_5fmessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace stm32
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::stm32::SPIMessage* Arena::CreateMaybeMessage< ::stm32::SPIMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stm32::SPIMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
